// built in types
type stream<T> keyword {
	each() T[C]
}
type T[C] pattern {
	stream() stream<T>
}

// example view aggregation
type Person interface {
	id	 string
	name string
	age  int
}
type ChangeName interface {
	id   string
	name string
}
type ChangeAge interface {
	id 	string
	age int
}

unit View({
	nameChanges stream<ChangeName>
	ageChanges	stream<ChangeAge>
}) {
	nameChange := nameChanges.each()
	ageChange := ageChanges.each()

	joined := OneToOne({
		leftId: nameChange.id,
		rightId: ageChange.id,

		partialView: {
			id: nameChange.id,
			name: nameChange.name,
			age: ageChange.age,
		},
	})

	personStream := joined.view.stream()
}

// std module
unit OneToOne<T> ({
	leftId		string[C1]
	rightId		string[C2]
	partialView	T[C1, C2]
}) {
	// ----------
	// some work

	// -----------
	// then result
	var view T[C3]
}
