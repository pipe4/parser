// built in types
type stream<T> keyword {
	each() T[C]
}
type T[C] pattern {
	stream() stream<T>
}

// example view aggregation
type Person interface {
	id	 string
	name string
	age  int
}
type ChangeName interface {
	id   string
	name string
}
type ChangeAge interface {
	id 	string
	age int
}

unit View({
	nameChanges stream<ChangeName>
	ageChanges	stream<ChangeAge>
}) {
	nameChange := nameChanges.each()
	ageChange := ageChanges.each()

	partialView := {
		id: nameChange.id,
		name: nameChange.name,
		age: ageChange.age,
	}

	joined := OneToOne({
		leftId: nameChange.id,
		rightId: ageChange.id,
		partialView: partialView,
	})
	view1 := joined.view

	Person[view1] clone := clone(view1)

	stream<Person> personStream := view.stream()
}

// std module
unit OneToOne ({
	leftId[leftContext]						string
	rightId[rightContext]					string
	partialView[leftContext,rightContext]	message
}) {
	// ----------
	// some work

	// -----------
	// then result

	var view type(partialView)
}

unit BookInputReader {
	stdInput // stream<byte>
	byteBlock := stdInput.byBlockRead() //  [256]byte[byteBlock]
	stringBlock := toString(byteBlock) //  string[byteBlock]
	bookPart := stringBlock.splitBy("EOF") //  string[bookPart,byteBlock]
	bookParts := bookPart.stream() // stream<BookPart>


	stream.flatMap(a -> [...a.split("EOF"), "EOF"]).split("EOF").map(strm -> strm.join("")).collectTo(List)
}

unit ByteBook {
	byteBuffer := makeRequest()
}
unit JsonBook {
	byteBook := ByteBook()
	mapped := ByteToJsonMapper(byteBook)
	book := mapped.message
}
unit ByteToJsonMapper ({
	byteBuffer []byte
}) {
	message := toJson(byteBuffer)
}


